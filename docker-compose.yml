version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: options-protocol-db
    environment:
      POSTGRES_DB: options_protocol
      POSTGRES_USER: protocol_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-dev_password_change_in_production}
      POSTGRES_HOST_AUTH_METHOD: md5
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U protocol_user -d options_protocol"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - protocol-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: options-protocol-redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - protocol-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-development}
    container_name: options-protocol-backend
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      API_PORT: 3001
      API_HOST: 0.0.0.0

      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: options_protocol
      DB_USER: protocol_user
      DB_PASSWORD: ${DB_PASSWORD:-dev_password_change_in_production}

      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379

      # Blockchain
      RPC_URL: ${RPC_URL:-https://sepolia.base.org}
      BASE_RPC_URL: ${BASE_RPC_URL:-https://sepolia.base.org}
      SEPOLIA_RPC_URL: ${SEPOLIA_RPC_URL:-https://ethereum-sepolia-rpc.publicnode.com}
      CHAIN_ID: ${CHAIN_ID:-84532}

      # Protocol
      NEXT_PUBLIC_PROTOCOL_ADDRESS: ${NEXT_PUBLIC_PROTOCOL_ADDRESS:-0xD7AFfB2B3303e9Cb44C9d9aFA6bD938200b3C8F2}
      BROADCASTER_PRIVATE_KEY: ${BROADCASTER_PRIVATE_KEY}
      DEPLOYER_PRIVATE_KEY: ${DEPLOYER_PRIVATE_KEY}

      # Tokens
      WETH_ADDRESS: ${WETH_ADDRESS:-0x4200000000000000000000000000000000000006}
      USDC_ADDRESS: ${USDC_ADDRESS:-0x036CbD53842c5426634e7929541eC2318f3dCF7e}

      # CORS
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
    ports:
      - "3001:3001"
    volumes:
      - ./backend/src:/app/src
      - ./backend/package.json:/app/package.json
      - backend_node_modules:/app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - protocol-network
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-development}
    container_name: options-protocol-frontend
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:3001}
      NEXT_PUBLIC_PROTOCOL_ADDRESS: ${NEXT_PUBLIC_PROTOCOL_ADDRESS:-0xD7AFfB2B3303e9Cb44C9d9aFA6bD938200b3C8F2}
      NEXT_PUBLIC_CHAIN_ID: ${NEXT_PUBLIC_CHAIN_ID:-84532}
      NEXT_PUBLIC_REOWN_PROJECT_ID: ${NEXT_PUBLIC_REOWN_PROJECT_ID}
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    networks:
      - protocol-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_node_modules:
    driver: local

networks:
  protocol-network:
    driver: bridge
